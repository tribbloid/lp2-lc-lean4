
# Environment
- The code is written in the latest Lean 4
- The build system is lake
- Mathlib and AESOP are preferred dependencies
- Build errors can observed by running "lake build <file path>"

# Code Style
- Each Rocq definition (variable, function, type, prop, lemma, theorem, tactic) should be translated to a Lean definition with identical name, add prefix `def_` if necessary
- each Lean definition should be accompanied by a comment with line number that indicates the Rocq definition it is based on, these line numbers should be strictly incremental and in the same order as the Rocq definition they are based on
- Rocq `Set` and `Prop` should be converted to a Lean `Prop`
- Rocq `Type` should also be converted to a Lean `Prop`, avoid declaring Lean `Type` unless necessary
- Rocq `Var` in `LibLN` should be converted to a Lean structure type with `name : String` as the only member
- Rocq `Hint Constructors` should be converted to a Lean aesop constructor attribute annotating the relevant type constructor
- Rocq `Hint Resolve` and other kinds of `Hint` should be converted to a Lean aesop attribute annotating a function. It should be noted that Lean attribute cannot annotate an inductive case, so new function may need to be created to handle the case
- Rocq `Lemma` should be converted to Lean `Theorem`
- Rocq `Tactic Notation` should be converted to Lean tactic macro, input and output of the macro should be logged, followed by an example demonstrating its use case
- Rocq `Ltac` should be converted to Lean elaborator, input and output of the macro should be logged, followed by an example demonstrating its use case

# General Code Style
- keep your code changes minimal and local
- do not introduce new dependency
- make sure there is no compiler or LSP warning, particularly unused variable warnings
- do not write placeholder implementation
- do not write duplicated or redundant implementation
- do not write comment longer than 2 lines
- do not write comment that is not necessary
- do not removing comment
- do not write "sorry"
- when creating new Lean file, do not include `.` in file name


# Workflow
- write 1 definition at a time, starting from top to bottom
- compile often to make sure that the definition has no error
